// Service Worker for Trinkets Institute Website
// Provides offline functionality, caching, and improved performance

const CACHE_NAME = 'trinkets-institute-v1.0.0'
const STATIC_CACHE_NAME = 'trinkets-static-v1.0.0'
const DYNAMIC_CACHE_NAME = 'trinkets-dynamic-v1.0.0'

// Critical assets to cache immediately
const STATIC_ASSETS = [
  '/',
  '/about',
  '/courses',
  '/services',
  '/contact',
  '/manifest.json',
  '/images/trinketlogo.jpg',
  '/icons/icon-192x192.svg',
  '/icons/icon-512x512.svg',
  '/_next/static/css/app.css', // Will be generated by Next.js
]

// API routes and dynamic content
const DYNAMIC_ASSETS = [
  '/api/',
  '/_next/static/',
  '/_next/image/',
]

// Install event - cache static assets
self.addEventListener('install', event => {
  console.log('Service Worker: Installing...')
  event.waitUntil(
    caches.open(STATIC_CACHE_NAME)
      .then(cache => {
        console.log('Service Worker: Caching static assets')
        return cache.addAll(STATIC_ASSETS)
      })
      .then(() => {
        console.log('Service Worker: Static assets cached successfully')
        return self.skipWaiting()
      })
      .catch(error => {
        console.error('Service Worker: Failed to cache static assets', error)
      })
  )
})

// Activate event - clean old caches
self.addEventListener('activate', event => {
  console.log('Service Worker: Activating...')
  event.waitUntil(
    caches.keys()
      .then(cacheNames => {
        return Promise.all(
          cacheNames.map(cacheName => {
            if (cacheName !== STATIC_CACHE_NAME && cacheName !== DYNAMIC_CACHE_NAME) {
              console.log('Service Worker: Deleting old cache:', cacheName)
              return caches.delete(cacheName)
            }
          })
        )
      })
      .then(() => {
        console.log('Service Worker: Activated successfully')
        return self.clients.claim()
      })
  )
})

// Fetch event - serve from cache, fallback to network
self.addEventListener('fetch', event => {
  const { request } = event
  const url = new URL(request.url)

  // Skip non-HTTP requests
  if (!request.url.startsWith('http')) return

  // Skip Chrome extension requests
  if (url.protocol === 'chrome-extension:') return

  // Handle different types of requests
  if (STATIC_ASSETS.some(asset => request.url.includes(asset))) {
    // Static assets - cache first strategy
    event.respondWith(cacheFirst(request))
  } else if (DYNAMIC_ASSETS.some(asset => request.url.includes(asset))) {
    // Dynamic assets - network first strategy
    event.respondWith(networkFirst(request))
  } else if (request.destination === 'image') {
    // Images - cache first with fallback
    event.respondWith(cacheFirstWithFallback(request))
  } else {
    // Other requests - network first with cache fallback
    event.respondWith(networkFirstWithOffline(request))
  }
})

// Cache first strategy - for static assets
async function cacheFirst(request) {
  try {
    const cachedResponse = await caches.match(request)
    if (cachedResponse) {
      return cachedResponse
    }

    const networkResponse = await fetch(request)
    if (networkResponse.ok) {
      const cache = await caches.open(STATIC_CACHE_NAME)
      cache.put(request, networkResponse.clone())
    }
    return networkResponse
  } catch (error) {
    console.error('Cache first strategy failed:', error)
    return new Response('Offline content unavailable', { 
      status: 503,
      statusText: 'Service Unavailable' 
    })
  }
}

// Network first strategy - for dynamic content
async function networkFirst(request) {
  try {
    const networkResponse = await fetch(request)
    if (networkResponse.ok) {
      const cache = await caches.open(DYNAMIC_CACHE_NAME)
      cache.put(request, networkResponse.clone())
    }
    return networkResponse
  } catch (error) {
    console.log('Network failed, trying cache for:', request.url)
    const cachedResponse = await caches.match(request)
    if (cachedResponse) {
      return cachedResponse
    }
    throw error
  }
}

// Cache first with fallback - for images
async function cacheFirstWithFallback(request) {
  try {
    const cachedResponse = await caches.match(request)
    if (cachedResponse) {
      return cachedResponse
    }

    const networkResponse = await fetch(request)
    if (networkResponse.ok) {
      const cache = await caches.open(DYNAMIC_CACHE_NAME)
      cache.put(request, networkResponse.clone())
    }
    return networkResponse
  } catch (error) {
    // Return a fallback image for failed image requests
    return new Response(
      '<svg width="200" height="200" xmlns="http://www.w3.org/2000/svg"><rect width="100%" height="100%" fill="#f3f4f6"/><text x="50%" y="50%" text-anchor="middle" dy="0.35em" font-family="Arial" font-size="14" fill="#6b7280">Image unavailable</text></svg>',
      {
        headers: {
          'Content-Type': 'image/svg+xml',
          'Cache-Control': 'no-cache'
        }
      }
    )
  }
}

// Network first with offline fallback - for pages
async function networkFirstWithOffline(request) {
  try {
    const networkResponse = await fetch(request)
    if (networkResponse.ok) {
      const cache = await caches.open(DYNAMIC_CACHE_NAME)
      cache.put(request, networkResponse.clone())
    }
    return networkResponse
  } catch (error) {
    const cachedResponse = await caches.match(request)
    if (cachedResponse) {
      return cachedResponse
    }

    // Return offline page for navigation requests
    if (request.mode === 'navigate') {
      const offlineResponse = await caches.match('/')
      if (offlineResponse) {
        return offlineResponse
      }
    }

    return new Response('You are offline', {
      status: 503,
      statusText: 'Service Unavailable'
    })
  }
}

// Background sync for failed requests (future enhancement)
self.addEventListener('sync', event => {
  if (event.tag === 'background-sync') {
    console.log('Service Worker: Background sync triggered')
    // Handle background sync for failed requests
  }
})

// Push notification handling (future enhancement)
self.addEventListener('push', event => {
  if (event.data) {
    const data = event.data.json()
    console.log('Service Worker: Push notification received', data)
    
    event.waitUntil(
      self.registration.showNotification(data.title, {
        body: data.body,
        icon: '/icons/icon-192x192.svg',
        badge: '/icons/icon-72x72.svg',
        tag: 'trinkets-notification',
        requireInteraction: false,
        actions: [
          {
            action: 'view',
            title: 'View Details',
            icon: '/icons/icon-72x72.svg'
          },
          {
            action: 'dismiss',
            title: 'Dismiss',
            icon: '/icons/icon-72x72.svg'
          }
        ]
      })
    )
  }
})

// Handle notification clicks
self.addEventListener('notificationclick', event => {
  event.notification.close()
  
  if (event.action === 'view') {
    event.waitUntil(
      clients.openWindow('/')
    )
  }
})

// Performance monitoring
self.addEventListener('message', event => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting()
  }
})

console.log('Service Worker: Loaded successfully')